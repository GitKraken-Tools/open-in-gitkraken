{"version":3,"sources":["../src/contextmenu.ts"],"sourcesContent":["const PULL_REQUEST_PATH_REGEXP = /.+\\/([^/]+)\\/(pull)\\/[^/]+\\/(.*)/;\n\nclass OptionValidationError extends Error {\n    constructor(message) {\n        super(message);\n        this.name = 'OptionValidationError';\n    }\n}\n\nasync function getOptions() {\n    const options = await chrome.storage.sync.get({\n        remoteHost: '',\n        basePath: '',\n        insidersBuild: false,\n        debug: false,\n    });\n\n    if (options.basePath === '') {\n        throw new OptionValidationError('Looks like you haven\\'t configured this extension yet. You can find more information about this by visiting the extension\\'s README page.');\n    }\n\n    return options;\n}\n\nfunction getVscodeLink({\n    repo, file, isFolder, line,\n}, {\n    remoteHost, insidersBuild, basePath, debug,\n}) {\n    let vscodeLink = insidersBuild\n        ? 'vscode-insiders'\n        : 'vscode';\n\n    // vscode://vscode-remote/ssh-remote+[host]/[path/to/file]:[line]\n    // OR\n    // vscode://file/[path/to/file]:[line]\n    if (remoteHost !== '') {\n        vscodeLink += `://vscode-remote/ssh-remote+${remoteHost}`;\n    } else {\n        vscodeLink += '://file';\n    }\n\n    // windows paths don't start with slash\n    if (basePath[0] !== '/') {\n        vscodeLink += '/';\n    }\n\n    vscodeLink += `${basePath}/${repo}/${file}`;\n\n    // opening a folder and not a file\n    if (isFolder) {\n        vscodeLink += '/';\n    }\n\n    if (line) {\n        vscodeLink += `:${line}:1`;\n    }\n\n    if (debug) {\n        // eslint-disable-next-line no-console\n        console.log(`About to open link: ${vscodeLink}`);\n    }\n\n    return vscodeLink;\n}\n\nfunction isPR(linkUrl) {\n    return PULL_REQUEST_PATH_REGEXP.test(linkUrl);\n}\n\nfunction parseLink(linkUrl, selectionText, pageUrl) {\n    const url = new URL(linkUrl ?? pageUrl);\n    const path = url.pathname;\n\n    if (isPR(url.pathname)) {\n        const pathInfo = PULL_REQUEST_PATH_REGEXP.exec(path);\n        const repo = pathInfo[1];\n        const isFolder = false;\n        const file = selectionText;\n        let line = null;\n        if (pageUrl.includes(linkUrl)) {\n            line = pageUrl.replace(linkUrl, '').replace('R', '').replace('L', '');\n        }\n        return {\n            repo,\n            file,\n            isFolder,\n            line,\n        };\n    }\n\n    const pathRegexp = /.+\\/([^/]+)\\/(blob|tree)\\/[^/]+\\/(.*)/;\n\n    if (!pathRegexp.test(path)) {\n        throw new Error(`Invalid link. Could not extract info from: ${path}.`);\n    }\n\n    const pathInfo = pathRegexp.exec(path);\n\n    const repo = pathInfo[1];\n    const isFolder = pathInfo[2] === 'tree';\n    const file = pathInfo[3];\n\n    let line;\n\n    if (url.hash.indexOf('#L') === 0) {\n        line = url.hash.substring(2);\n    }\n\n    return {\n        repo,\n        file,\n        isFolder,\n        line,\n    };\n}\n\nasync function getCurrentTab() {\n    const queryOptions = { active: true, lastFocusedWindow: true };\n    const [tab] = await chrome.tabs.query(queryOptions);\n    return tab;\n}\n\nfunction injectedAlert(message) {\n    // eslint-disable-next-line no-undef\n    alert(message);\n}\n\nfunction injectedWindowOpen(url) {\n    // eslint-disable-next-line no-undef\n    window.open(url);\n}\n\nasync function openInVscode({ linkUrl, selectionText, pageUrl }) {\n    let tab;\n    try {\n        tab = await getCurrentTab();\n    } catch (e) {\n        // eslint-disable-next-line no-console\n        console.error('Unexpected error');\n        // eslint-disable-next-line no-console\n        console.error(e);\n        return;\n    }\n\n    try {\n        const options = await getOptions();\n        const parsedLinkData = parseLink(linkUrl, selectionText, pageUrl);\n        const url = getVscodeLink(parsedLinkData, options);\n        await chrome.scripting.executeScript(\n            {\n                target: { tabId: tab.id },\n                func: injectedWindowOpen,\n                args: [url],\n            },\n        );\n    } catch (e) {\n        // eslint-disable-next-line no-console\n        console.error(e);\n        await chrome.scripting.executeScript(\n            {\n                target: { tabId: tab.id },\n                func: injectedAlert,\n                args: [e.message ?? e],\n            },\n        );\n        if (e.name === 'OptionValidationError') {\n            chrome.runtime.openOptionsPage();\n        }\n    }\n}\n\nconst contextMenuId = 'open-in-vscode-context-menu';\n\nchrome.contextMenus.create({\n    id: contextMenuId,\n    title: 'Open in VSCode',\n    contexts: ['link', 'page'],\n});\n\nchrome.contextMenus.onClicked.addListener(({ menuItemId, ...info }) => {\n    if (menuItemId !== contextMenuId) {\n        return;\n    }\n\n    openInVscode(info);\n});\n\nchrome.action.onClicked.addListener((({ url }) => {\n    openInVscode({ linkUrl: url, pageUrl: url });\n}));"],"mappings":";AAAA,IAAM,2BAA2B;AAEjC,IAAM,wBAAN,cAAoC,MAAM;AAAA,EACtC,YAAY,SAAS;AACjB,UAAM,OAAO;AACb,SAAK,OAAO;AAAA,EAChB;AACJ;AAEA,eAAe,aAAa;AACxB,QAAM,UAAU,MAAM,OAAO,QAAQ,KAAK,IAAI;AAAA,IAC1C,YAAY;AAAA,IACZ,UAAU;AAAA,IACV,eAAe;AAAA,IACf,OAAO;AAAA,EACX,CAAC;AAED,MAAI,QAAQ,aAAa,IAAI;AACzB,UAAM,IAAI,sBAAsB,yIAA2I;AAAA,EAC/K;AAEA,SAAO;AACX;AAEA,SAAS,cAAc;AAAA,EACnB;AAAA,EAAM;AAAA,EAAM;AAAA,EAAU;AAC1B,GAAG;AAAA,EACC;AAAA,EAAY;AAAA,EAAe;AAAA,EAAU;AACzC,GAAG;AACC,MAAI,aAAa,gBACX,oBACA;AAKN,MAAI,eAAe,IAAI;AACnB,kBAAc,+BAA+B;AAAA,EACjD,OAAO;AACH,kBAAc;AAAA,EAClB;AAGA,MAAI,SAAS,OAAO,KAAK;AACrB,kBAAc;AAAA,EAClB;AAEA,gBAAc,GAAG,YAAY,QAAQ;AAGrC,MAAI,UAAU;AACV,kBAAc;AAAA,EAClB;AAEA,MAAI,MAAM;AACN,kBAAc,IAAI;AAAA,EACtB;AAEA,MAAI,OAAO;AAEP,YAAQ,IAAI,uBAAuB,YAAY;AAAA,EACnD;AAEA,SAAO;AACX;AAEA,SAAS,KAAK,SAAS;AACnB,SAAO,yBAAyB,KAAK,OAAO;AAChD;AAEA,SAAS,UAAU,SAAS,eAAe,SAAS;AAChD,QAAM,MAAM,IAAI,IAAI,WAAW,OAAO;AACtC,QAAM,OAAO,IAAI;AAEjB,MAAI,KAAK,IAAI,QAAQ,GAAG;AACpB,UAAMA,YAAW,yBAAyB,KAAK,IAAI;AACnD,UAAMC,QAAOD,UAAS;AACtB,UAAME,YAAW;AACjB,UAAMC,QAAO;AACb,QAAIC,QAAO;AACX,QAAI,QAAQ,SAAS,OAAO,GAAG;AAC3B,MAAAA,QAAO,QAAQ,QAAQ,SAAS,EAAE,EAAE,QAAQ,KAAK,EAAE,EAAE,QAAQ,KAAK,EAAE;AAAA,IACxE;AACA,WAAO;AAAA,MACH,MAAAH;AAAA,MACA,MAAAE;AAAA,MACA,UAAAD;AAAA,MACA,MAAAE;AAAA,IACJ;AAAA,EACJ;AAEA,QAAM,aAAa;AAEnB,MAAI,CAAC,WAAW,KAAK,IAAI,GAAG;AACxB,UAAM,IAAI,MAAM,8CAA8C,OAAO;AAAA,EACzE;AAEA,QAAM,WAAW,WAAW,KAAK,IAAI;AAErC,QAAM,OAAO,SAAS;AACtB,QAAM,WAAW,SAAS,OAAO;AACjC,QAAM,OAAO,SAAS;AAEtB,MAAI;AAEJ,MAAI,IAAI,KAAK,QAAQ,IAAI,MAAM,GAAG;AAC9B,WAAO,IAAI,KAAK,UAAU,CAAC;AAAA,EAC/B;AAEA,SAAO;AAAA,IACH;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACJ;AACJ;AAEA,eAAe,gBAAgB;AAC3B,QAAM,eAAe,EAAE,QAAQ,MAAM,mBAAmB,KAAK;AAC7D,QAAM,CAAC,GAAG,IAAI,MAAM,OAAO,KAAK,MAAM,YAAY;AAClD,SAAO;AACX;AAEA,SAAS,cAAc,SAAS;AAE5B,QAAM,OAAO;AACjB;AAEA,SAAS,mBAAmB,KAAK;AAE7B,SAAO,KAAK,GAAG;AACnB;AAEA,eAAe,aAAa,EAAE,SAAS,eAAe,QAAQ,GAAG;AAC7D,MAAI;AACJ,MAAI;AACA,UAAM,MAAM,cAAc;AAAA,EAC9B,SAAS,GAAP;AAEE,YAAQ,MAAM,kBAAkB;AAEhC,YAAQ,MAAM,CAAC;AACf;AAAA,EACJ;AAEA,MAAI;AACA,UAAM,UAAU,MAAM,WAAW;AACjC,UAAM,iBAAiB,UAAU,SAAS,eAAe,OAAO;AAChE,UAAM,MAAM,cAAc,gBAAgB,OAAO;AACjD,UAAM,OAAO,UAAU;AAAA,MACnB;AAAA,QACI,QAAQ,EAAE,OAAO,IAAI,GAAG;AAAA,QACxB,MAAM;AAAA,QACN,MAAM,CAAC,GAAG;AAAA,MACd;AAAA,IACJ;AAAA,EACJ,SAAS,GAAP;AAEE,YAAQ,MAAM,CAAC;AACf,UAAM,OAAO,UAAU;AAAA,MACnB;AAAA,QACI,QAAQ,EAAE,OAAO,IAAI,GAAG;AAAA,QACxB,MAAM;AAAA,QACN,MAAM,CAAC,EAAE,WAAW,CAAC;AAAA,MACzB;AAAA,IACJ;AACA,QAAI,EAAE,SAAS,yBAAyB;AACpC,aAAO,QAAQ,gBAAgB;AAAA,IACnC;AAAA,EACJ;AACJ;AAEA,IAAM,gBAAgB;AAEtB,OAAO,aAAa,OAAO;AAAA,EACvB,IAAI;AAAA,EACJ,OAAO;AAAA,EACP,UAAU,CAAC,QAAQ,MAAM;AAC7B,CAAC;AAED,OAAO,aAAa,UAAU,YAAY,CAAC,EAAE,eAAe,KAAK,MAAM;AACnE,MAAI,eAAe,eAAe;AAC9B;AAAA,EACJ;AAEA,eAAa,IAAI;AACrB,CAAC;AAED,OAAO,OAAO,UAAU,YAAa,CAAC,EAAE,IAAI,MAAM;AAC9C,eAAa,EAAE,SAAS,KAAK,SAAS,IAAI,CAAC;AAC/C,CAAE;","names":["pathInfo","repo","isFolder","file","line"]}