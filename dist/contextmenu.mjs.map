{"version":3,"sources":["../node_modules/github-url-detection/distribution/index.js","../src/contextmenu.ts"],"sourcesContent":["const reservedNames = [\n  \"400\",\n  \"401\",\n  \"402\",\n  \"403\",\n  \"404\",\n  \"405\",\n  \"406\",\n  \"407\",\n  \"408\",\n  \"409\",\n  \"410\",\n  \"411\",\n  \"412\",\n  \"413\",\n  \"414\",\n  \"415\",\n  \"416\",\n  \"417\",\n  \"418\",\n  \"419\",\n  \"420\",\n  \"421\",\n  \"422\",\n  \"423\",\n  \"424\",\n  \"425\",\n  \"426\",\n  \"427\",\n  \"428\",\n  \"429\",\n  \"430\",\n  \"431\",\n  \"500\",\n  \"501\",\n  \"502\",\n  \"503\",\n  \"504\",\n  \"505\",\n  \"506\",\n  \"507\",\n  \"508\",\n  \"509\",\n  \"510\",\n  \"511\",\n  \"about\",\n  \"access\",\n  \"account\",\n  \"admin\",\n  \"advisories\",\n  \"anonymous\",\n  \"any\",\n  \"api\",\n  \"apps\",\n  \"attributes\",\n  \"auth\",\n  \"billing\",\n  \"blob\",\n  \"blog\",\n  \"bounty\",\n  \"branches\",\n  \"business\",\n  \"businesses\",\n  \"c\",\n  \"cache\",\n  \"case-studies\",\n  \"categories\",\n  \"central\",\n  \"certification\",\n  \"changelog\",\n  \"cla\",\n  \"cloud\",\n  \"codereview\",\n  \"collection\",\n  \"collections\",\n  \"comments\",\n  \"commit\",\n  \"commits\",\n  \"community\",\n  \"companies\",\n  \"compare\",\n  \"contact\",\n  \"contributing\",\n  \"cookbook\",\n  \"coupons\",\n  \"customer-stories\",\n  \"customer\",\n  \"customers\",\n  \"dashboard\",\n  \"dashboards\",\n  \"design\",\n  \"develop\",\n  \"developer\",\n  \"diff\",\n  \"discover\",\n  \"discussions\",\n  \"docs\",\n  \"downloads\",\n  \"downtime\",\n  \"editor\",\n  \"editors\",\n  \"edu\",\n  \"enterprise\",\n  \"events\",\n  \"explore\",\n  \"featured\",\n  \"features\",\n  \"files\",\n  \"fixtures\",\n  \"forked\",\n  \"garage\",\n  \"ghost\",\n  \"gist\",\n  \"gists\",\n  \"graphs\",\n  \"guide\",\n  \"guides\",\n  \"help\",\n  \"help-wanted\",\n  \"home\",\n  \"hooks\",\n  \"hosting\",\n  \"hovercards\",\n  \"identity\",\n  \"images\",\n  \"inbox\",\n  \"individual\",\n  \"info\",\n  \"integration\",\n  \"interfaces\",\n  \"introduction\",\n  \"invalid-email-address\",\n  \"investors\",\n  \"issues\",\n  \"jobs\",\n  \"join\",\n  \"journal\",\n  \"journals\",\n  \"lab\",\n  \"labs\",\n  \"languages\",\n  \"launch\",\n  \"layouts\",\n  \"learn\",\n  \"legal\",\n  \"library\",\n  \"linux\",\n  \"listings\",\n  \"lists\",\n  \"login\",\n  \"logos\",\n  \"logout\",\n  \"mac\",\n  \"maintenance\",\n  \"malware\",\n  \"man\",\n  \"marketplace\",\n  \"mention\",\n  \"mentioned\",\n  \"mentioning\",\n  \"mentions\",\n  \"migrating\",\n  \"milestones\",\n  \"mine\",\n  \"mirrors\",\n  \"mobile\",\n  \"navigation\",\n  \"network\",\n  \"new\",\n  \"news\",\n  \"none\",\n  \"nonprofit\",\n  \"nonprofits\",\n  \"notices\",\n  \"notifications\",\n  \"oauth\",\n  \"offer\",\n  \"open-source\",\n  \"organisations\",\n  \"organizations\",\n  \"orgs\",\n  \"pages\",\n  \"partners\",\n  \"payments\",\n  \"personal\",\n  \"plans\",\n  \"plugins\",\n  \"popular\",\n  \"popularity\",\n  \"posts\",\n  \"press\",\n  \"pricing\",\n  \"professional\",\n  \"projects\",\n  \"pulls\",\n  \"raw\",\n  \"readme\",\n  \"recommendations\",\n  \"redeem\",\n  \"releases\",\n  \"render\",\n  \"reply\",\n  \"repositories\",\n  \"resources\",\n  \"restore\",\n  \"revert\",\n  \"save-net-neutrality\",\n  \"saved\",\n  \"scraping\",\n  \"search\",\n  \"security\",\n  \"services\",\n  \"sessions\",\n  \"settings\",\n  \"shareholders\",\n  \"shop\",\n  \"showcases\",\n  \"signin\",\n  \"signup\",\n  \"site\",\n  \"spam\",\n  \"sponsors\",\n  \"ssh\",\n  \"staff\",\n  \"starred\",\n  \"stars\",\n  \"static\",\n  \"status\",\n  \"statuses\",\n  \"storage\",\n  \"store\",\n  \"stories\",\n  \"styleguide\",\n  \"subscriptions\",\n  \"suggest\",\n  \"suggestion\",\n  \"suggestions\",\n  \"support\",\n  \"suspended\",\n  \"talks\",\n  \"teach\",\n  \"teacher\",\n  \"teachers\",\n  \"teaching\",\n  \"team\",\n  \"teams\",\n  \"ten\",\n  \"terms\",\n  \"timeline\",\n  \"topic\",\n  \"topics\",\n  \"tos\",\n  \"tour\",\n  \"train\",\n  \"training\",\n  \"translations\",\n  \"tree\",\n  \"trending\",\n  \"updates\",\n  \"username\",\n  \"users\",\n  \"visualization\",\n  \"w\",\n  \"watching\",\n  \"wiki\",\n  \"windows\",\n  \"works-with\",\n  \"www0\",\n  \"www1\",\n  \"www2\",\n  \"www3\",\n  \"www4\",\n  \"www5\",\n  \"www6\",\n  \"www7\",\n  \"www8\",\n  \"www9\"\n];\nconst $ = (selector) => document.querySelector(selector);\nconst exists = (selector) => Boolean($(selector));\nconst is404 = () => document.title.startsWith(\"Page not found \\xB7 GitHub\");\nconst is500 = () => document.title === \"Server Error \\xB7 GitHub\" || document.title === \"Unicorn! \\xB7 GitHub\" || document.title === \"504 Gateway Time-out\";\nconst isPasswordConfirmation = () => document.title === \"Confirm password\" || document.title === \"Confirm access\";\nconst isBlame = (url = location) => Boolean(getRepo(url)?.path.startsWith(\"blame/\"));\nconst isCommit = (url = location) => isSingleCommit(url) || isPRCommit(url);\nconst isCommitList = (url = location) => isRepoCommitList(url) || isPRCommitList(url);\nconst isRepoCommitList = (url = location) => Boolean(getRepo(url)?.path.startsWith(\"commits\"));\nconst isCompare = (url = location) => Boolean(getRepo(url)?.path.startsWith(\"compare\"));\nconst isCompareWikiPage = (url = location) => isRepoWiki(url) && getCleanPathname(url).split(\"/\").slice(3, 5).includes(\"_compare\");\nconst isDashboard = (url = location) => !isGist(url) && /^$|^(orgs\\/[^/]+\\/)?dashboard(\\/|$)/.test(getCleanPathname(url));\nconst isEnterprise = (url = location) => url.hostname !== \"github.com\" && url.hostname !== \"gist.github.com\";\nconst isGist = (url = location) => typeof getCleanGistPathname(url) === \"string\";\nconst isGlobalIssueOrPRList = (url = location) => [\"issues\", \"pulls\"].includes(url.pathname.split(\"/\", 2)[1]);\nconst isGlobalSearchResults = (url = location) => url.pathname === \"/search\" && new URLSearchParams(url.search).get(\"q\") !== null;\nconst isIssue = (url = location) => /^issues\\/\\d+/.test(getRepo(url)?.path) && document.title !== \"GitHub \\xB7 Where software is built\";\nconst isIssueOrPRList = (url = location) => isGlobalIssueOrPRList(url) || isRepoIssueOrPRList(url) || isMilestone(url);\nconst isConversation = (url = location) => isIssue(url) || isPRConversation(url);\nconst isLabelList = (url = location) => getRepo(url)?.path === \"labels\";\nconst isMilestone = (url = location) => /^milestone\\/\\d+/.test(getRepo(url)?.path);\nconst isMilestoneList = (url = location) => getRepo(url)?.path === \"milestones\";\nconst isNewFile = (url = location) => Boolean(getRepo(url)?.path.startsWith(\"new\"));\nconst isNewIssue = (url = location) => getRepo(url)?.path === \"issues/new\";\nconst isNewRelease = (url = location) => getRepo(url)?.path === \"releases/new\";\nconst isNewWikiPage = (url = location) => isRepoWiki(url) && getCleanPathname(url).endsWith(\"/_new\");\nconst isNotifications = (url = location) => getCleanPathname(url) === \"notifications\";\nconst isOrganizationProfile = () => exists('meta[name=\"hovercard-subject-tag\"][content^=\"organization\"]');\nconst isOrganizationRepo = () => Boolean(document.querySelector(\"[data-owner-scoped-search-url]\")?.dataset[\"ownerScopedSearchUrl\"].startsWith(\"/org\"));\nconst isTeamDiscussion = (url = location) => /^orgs\\/[^/]+\\/teams\\/[^/]+($|\\/discussions)/.test(getCleanPathname(url));\nconst isOwnUserProfile = () => getCleanPathname() === getUsername();\nconst isOwnOrganizationProfile = () => isOrganizationProfile() && !exists('[href*=\"contact/report-abuse?report=\"]');\nconst isProject = (url = location) => /^projects\\/\\d+/.test(getRepo(url)?.path);\nconst isProjects = (url = location) => getRepo(url)?.path === \"projects\";\nconst isDiscussion = (url = location) => /^discussions\\/\\d+/.test(getRepo(url)?.path);\nconst isDiscussionList = (url = location) => getRepo(url)?.path === \"discussions\";\nconst isPR = (url = location) => /^pull\\/\\d+/.test(getRepo(url)?.path) && !isPRConflicts(url);\nconst isPRConflicts = (url = location) => /^pull\\/\\d+\\/conflicts/.test(getRepo(url)?.path);\nconst isPRList = (url = location) => url.pathname === \"/pulls\" || getRepo(url)?.path === \"pulls\";\nconst isPRCommit = (url = location) => /^pull\\/\\d+\\/commits\\/[\\da-f]{5,40}$/.test(getRepo(url)?.path);\nconst isPRCommit404 = () => isPRCommit() && document.title.startsWith(\"Commit range not found \\xB7 Pull Request\");\nconst isPRFile404 = () => isPRFiles() && document.title.startsWith(\"Commit range not found \\xB7 Pull Request\");\nconst isPRConversation = (url = location) => /^pull\\/\\d+$/.test(getRepo(url)?.path);\nconst isPRCommitList = (url = location) => /^pull\\/\\d+\\/commits$/.test(getRepo(url)?.path);\nconst isPRFiles = (url = location) => /^pull\\/\\d+\\/files/.test(getRepo(url)?.path);\nconst isQuickPR = (url = location) => isCompare(url) && /[?&]quick_pull=1(&|$)/.test(url.search);\nconst isDraftPR = () => exists(\"#partial-discussion-header .octicon-git-pull-request-draft\");\nconst isOpenPR = () => exists(\"#partial-discussion-header :is(.octicon-git-pull-request, .octicon-git-pull-request-draft)\");\nconst isMergedPR = () => exists(\"#partial-discussion-header .octicon-git-merge\");\nconst isClosedPR = () => exists(\"#partial-discussion-header :is(.octicon-git-pull-request-closed, .octicon-git-merge)\");\nconst isClosedIssue = () => exists(\"#partial-discussion-header :is(.octicon-issue-closed, .octicon-skip)\");\nconst isReleases = (url = location) => getRepo(url)?.path === \"releases\";\nconst isTags = (url = location) => getRepo(url)?.path === \"tags\";\nconst isSingleTag = (url = location) => /^(releases\\/tag)/.test(getRepo(url)?.path);\nconst isReleasesOrTags = (url = location) => isReleases(url) || isTags(url) || isSingleTag(url);\nconst isDeletingFile = (url = location) => Boolean(getRepo(url)?.path.startsWith(\"delete\"));\nconst isEditingFile = (url = location) => Boolean(getRepo(url)?.path.startsWith(\"edit\"));\nconst hasFileEditor = (url = location) => isEditingFile(url) || isNewFile(url) || isDeletingFile(url);\nconst isEditingRelease = (url = location) => Boolean(getRepo(url)?.path.startsWith(\"releases/edit\"));\nconst hasReleaseEditor = (url = location) => isEditingRelease(url) || isNewRelease(url);\nconst isEditingWikiPage = (url = location) => isRepoWiki(url) && getCleanPathname(url).endsWith(\"/_edit\");\nconst hasWikiPageEditor = (url = location) => isEditingWikiPage(url) || isNewWikiPage(url);\nconst isRepo = (url = location) => /^[^/]+\\/[^/]+/.test(getCleanPathname(url)) && !reservedNames.includes(url.pathname.split(\"/\", 2)[1]) && !isDashboard(url) && !isGist(url) && !isNewRepoTemplate(url);\nconst hasRepoHeader = (url = location) => isRepo(url) && !isRepoSearch(url);\nconst isEmptyRepoRoot = () => isRepoHome() && !exists('link[rel=\"canonical\"]');\nconst isEmptyRepo = () => exists('[aria-label=\"Cannot fork because repository is empty.\"]');\nconst isPublicRepo = () => Boolean(isRepo() && $(\"#repository-container-header .Label\").textContent.startsWith(\"Public\"));\nconst isArchivedRepo = () => Boolean(isRepo() && $(\"#repository-container-header .Label\").textContent.endsWith(\"archive\"));\nconst isBlank = () => exists(\"main .blankslate\");\nconst isRepoTaxonomyIssueOrPRList = (url = location) => /^labels\\/.+|^milestones\\/\\d+(?!\\/edit)/.test(getRepo(url)?.path);\nconst isRepoIssueOrPRList = (url = location) => isRepoPRList(url) || isRepoIssueList(url) || isRepoTaxonomyIssueOrPRList(url);\nconst isRepoPRList = (url = location) => Boolean(getRepo(url)?.path.startsWith(\"pulls\"));\nconst isRepoIssueList = (url = location) => /^labels\\/|^issues(?!\\/(\\d+|new|templates)($|\\/))/.test(getRepo(url)?.path);\nconst isRepoHome = (url = location) => getRepo(url)?.path === \"\";\nconst isRepoRoot = (url) => {\n  const repository = getRepo(url ?? location);\n  if (!repository) {\n    return false;\n  }\n  if (!repository.path) {\n    return true;\n  }\n  if (url) {\n    return /^tree\\/[^/]+$/.test(repository.path);\n  }\n  return repository.path.startsWith(\"tree/\") && document.title.startsWith(repository.nameWithOwner) && !document.title.endsWith(repository.nameWithOwner);\n};\nconst isRepoSearch = (url = location) => getRepo(url)?.path === \"search\";\nconst isRepoSettings = (url = location) => Boolean(getRepo(url)?.path.startsWith(\"settings\"));\nconst isRepoMainSettings = (url = location) => getRepo(url)?.path === \"settings\";\nconst isRepliesSettings = (url = location) => url.pathname.startsWith(\"/settings/replies\");\nconst isUserSettings = (url = location) => url.pathname.startsWith(\"/settings/\");\nconst isRepoTree = (url = location) => isRepoRoot(url) || Boolean(getRepo(url)?.path.startsWith(\"tree/\"));\nconst isRepoWiki = (url = location) => Boolean(getRepo(url)?.path.startsWith(\"wiki\"));\nconst isSingleCommit = (url = location) => /^commit\\/[\\da-f]{5,40}$/.test(getRepo(url)?.path);\nconst isSingleFile = (url = location) => Boolean(getRepo(url)?.path.startsWith(\"blob/\"));\nconst isFileFinder = (url = location) => Boolean(getRepo(url)?.path.startsWith(\"find/\"));\nconst isRepoForksList = (url = location) => getRepo(url)?.path === \"network/members\";\nconst isRepoNetworkGraph = (url = location) => getRepo(url)?.path === \"network\";\nconst isForkedRepo = () => exists('meta[name=\"octolytics-dimension-repository_is_fork\"][content=\"true\"]');\nconst isSingleGist = (url = location) => /^[^/]+\\/[\\da-f]{20,32}(\\/[\\da-f]{40})?$/.test(getCleanGistPathname(url));\nconst isGistRevision = (url = location) => /^[^/]+\\/[\\da-f]{20,32}\\/revisions$/.test(getCleanGistPathname(url));\nconst isTrending = (url = location) => url.pathname === \"/trending\" || url.pathname.startsWith(\"/trending/\");\nconst isBranches = (url = location) => Boolean(getRepo(url)?.path.startsWith(\"branches\"));\nconst doesLookLikeAProfile = (string) => typeof string === \"string\" && string.length > 0 && !string.includes(\"/\") && !string.includes(\".\") && !reservedNames.includes(string);\nconst isProfile = (url = location) => !isGist(url) && doesLookLikeAProfile(getCleanPathname(url));\nconst isGistProfile = (url = location) => doesLookLikeAProfile(getCleanGistPathname(url));\nconst isUserProfile = () => isProfile() && !isOrganizationProfile();\nconst isPrivateUserProfile = () => isUserProfile() && !exists('.UnderlineNav-item[href$=\"tab=stars\"]');\nconst isUserProfileMainTab = () => isUserProfile() && !new URLSearchParams(location.search).has(\"tab\");\nconst isUserProfileRepoTab = (url = location) => isProfile(url) && new URLSearchParams(url.search).get(\"tab\") === \"repositories\";\nconst isUserProfileStarsTab = (url = location) => isProfile(url) && new URLSearchParams(url.search).get(\"tab\") === \"stars\";\nconst isUserProfileFollowersTab = (url = location) => isProfile(url) && new URLSearchParams(url.search).get(\"tab\") === \"followers\";\nconst isUserProfileFollowingTab = (url = location) => isProfile(url) && new URLSearchParams(url.search).get(\"tab\") === \"following\";\nconst hasComments = (url = location) => isPR(url) || isIssue(url) || isCommit(url) || isTeamDiscussion(url) || isSingleGist(url);\nconst hasRichTextEditor = (url = location) => hasComments(url) || isNewIssue(url) || isCompare(url) || isRepliesSettings(url) || hasReleaseEditor(url) || isDiscussion(url);\nconst hasCode = (url = location) => hasComments(url) || isRepoTree(url) || isRepoSearch(url) || isGlobalSearchResults(url) || isSingleFile(url) || isGist(url) || isCompare(url) || isCompareWikiPage(url) || isBlame(url);\nconst hasFiles = (url = location) => isCommit(url) || isCompare(url) || isPRFiles(url);\nconst isMarketplaceAction = (url = location) => url.pathname.startsWith(\"/marketplace/actions/\");\nconst isActionJobRun = (url = location) => Boolean(getRepo(url)?.path.startsWith(\"runs/\"));\nconst isActionRun = (url = location) => /^(actions\\/)?runs/.test(getRepo(url)?.path);\nconst isNewAction = (url = location) => getRepo(url)?.path === \"actions/new\";\nconst isRepositoryActions = (url = location) => /^actions(\\/workflows\\/.+\\.ya?ml)?$/.test(getRepo(url)?.path);\nconst isUserTheOrganizationOwner = () => isOrganizationProfile() && exists('[aria-label=\"Organization\"] [data-tab-item=\"org-header-settings-tab\"]');\nconst canUserEditRepo = () => isRepo() && exists('.reponav-item[href$=\"/settings\"], [data-tab-item$=\"settings-tab\"]');\nconst isNewRepo = (url = location) => url.pathname === \"/new\" || /^organizations\\/[^/]+\\/repositories\\/new$/.test(getCleanPathname(url));\nconst isNewRepoTemplate = (url = location) => Boolean(url.pathname.split(\"/\")[3] === \"generate\");\nconst getUsername = () => document.querySelector('meta[name=\"user-login\"]')?.getAttribute(\"content\");\nconst getCleanPathname = (url = location) => url.pathname.replace(/\\/+/g, \"/\").slice(1, url.pathname.endsWith(\"/\") ? -1 : void 0);\nconst getCleanGistPathname = (url = location) => {\n  const pathname = getCleanPathname(url);\n  if (url.hostname.startsWith(\"gist.\")) {\n    return pathname;\n  }\n  const [gist, ...parts] = pathname.split(\"/\");\n  return gist === \"gist\" ? parts.join(\"/\") : void 0;\n};\nconst getRepo = (url) => {\n  if (!url) {\n    const canonical = document.querySelector('[property=\"og:url\"]');\n    if (canonical) {\n      const canonicalUrl = new URL(canonical.content, location.origin);\n      if (getCleanPathname(canonicalUrl).toLowerCase() === getCleanPathname(location).toLowerCase()) {\n        url = canonicalUrl;\n      }\n    }\n  }\n  if (typeof url === \"string\") {\n    url = new URL(url, location.origin);\n  }\n  if (!isRepo(url)) {\n    return;\n  }\n  const [owner, name, ...path] = getCleanPathname(url).split(\"/\");\n  return {\n    owner,\n    name,\n    nameWithOwner: owner + \"/\" + name,\n    path: path.join(\"/\")\n  };\n};\nconst utils = {\n  getUsername,\n  getCleanPathname,\n  getCleanGistPathname,\n  getRepositoryInfo: getRepo\n};\nexport {\n  canUserEditRepo,\n  hasCode,\n  hasComments,\n  hasFileEditor,\n  hasFiles,\n  hasReleaseEditor,\n  hasRepoHeader,\n  hasRichTextEditor,\n  hasWikiPageEditor,\n  is404,\n  is500,\n  isActionJobRun,\n  isActionRun,\n  isArchivedRepo,\n  isBlame,\n  isBlank,\n  isBranches,\n  isClosedIssue,\n  isClosedPR,\n  isCommit,\n  isCommitList,\n  isCompare,\n  isCompareWikiPage,\n  isConversation,\n  isDashboard,\n  isDeletingFile,\n  isDiscussion,\n  isDiscussionList,\n  isDraftPR,\n  isEditingFile,\n  isEditingRelease,\n  isEditingWikiPage,\n  isEmptyRepo,\n  isEmptyRepoRoot,\n  isEnterprise,\n  isFileFinder,\n  isForkedRepo,\n  isGist,\n  isGistProfile,\n  isGistRevision,\n  isGlobalIssueOrPRList,\n  isGlobalSearchResults,\n  isIssue,\n  isIssueOrPRList,\n  isLabelList,\n  isMarketplaceAction,\n  isMergedPR,\n  isMilestone,\n  isMilestoneList,\n  isNewAction,\n  isNewFile,\n  isNewIssue,\n  isNewRelease,\n  isNewRepo,\n  isNewRepoTemplate,\n  isNewWikiPage,\n  isNotifications,\n  isOpenPR,\n  isOrganizationProfile,\n  isOrganizationRepo,\n  isOwnOrganizationProfile,\n  isOwnUserProfile,\n  isPR,\n  isPRCommit,\n  isPRCommit404,\n  isPRCommitList,\n  isPRConflicts,\n  isPRConversation,\n  isPRFile404,\n  isPRFiles,\n  isPRList,\n  isPasswordConfirmation,\n  isPrivateUserProfile,\n  isProfile,\n  isProject,\n  isProjects,\n  isPublicRepo,\n  isQuickPR,\n  isReleases,\n  isReleasesOrTags,\n  isRepliesSettings,\n  isRepo,\n  isRepoCommitList,\n  isRepoForksList,\n  isRepoHome,\n  isRepoIssueList,\n  isRepoIssueOrPRList,\n  isRepoMainSettings,\n  isRepoNetworkGraph,\n  isRepoPRList,\n  isRepoRoot,\n  isRepoSearch,\n  isRepoSettings,\n  isRepoTaxonomyIssueOrPRList,\n  isRepoTree,\n  isRepoWiki,\n  isRepositoryActions,\n  isSingleCommit,\n  isSingleFile,\n  isSingleGist,\n  isSingleTag,\n  isTags,\n  isTeamDiscussion,\n  isTrending,\n  isUserProfile,\n  isUserProfileFollowersTab,\n  isUserProfileFollowingTab,\n  isUserProfileMainTab,\n  isUserProfileRepoTab,\n  isUserProfileStarsTab,\n  isUserSettings,\n  isUserTheOrganizationOwner,\n  utils\n};\n","import {\n  isRepoHome,\n  isRepoRoot,\n  isCommit,\n  isSingleTag,\n  utils,\n} from 'github-url-detection';\n\n// import { getFirstCommit } from '.';\n\nconst { getRepositoryInfo: getRepo } = utils;\n\nconst isBranch = (url) => {\n  return !isRepoHome(url) && isRepoRoot(url);\n}\n\nconst log = (...data: any[]) => {\n  chrome.runtime.sendMessage({\n    subject: 'console-log',\n    payload: data,\n  });\n};\n\nchrome.runtime.sendMessage({\n  subject: 'console-log',\n  payload: 'test',\n});\n\nconst getGitUrl = async (): Promise<string> => {\n  let gitUrl: string;\n  await new Promise<void>((resolve) => {\n    chrome.runtime.sendMessage(\n      { subject: 'request-git-url' },\n      (res) => {\n        gitUrl = res;\n        log(res);\n      },\n    );\n    resolve();\n  });\n  // @ts-ignore\n  return gitUrl ?? '';\n};\n\nconst prefix = 'gitkraken://repolink/';\nconst firstCommit = 'first_commit_here';\nlet suffix = '';\nconst buildSuffix = async () => {\n  let gitUrl = await getGitUrl();\n  return `?url=${gitUrl}`;\n};\nbuildSuffix();\n\nconst linkFormats = {\n  repo: `${prefix}${firstCommit}?url=${suffix}`,\n  commit: (commit) => `${prefix}${firstCommit}/commit/${commit}?url=${suffix}`,\n  branch: (branch) => `${prefix}${firstCommit}/branch/${branch}?url=${suffix}`,\n  tag: (tag) => `${prefix}${firstCommit}/tag/${tag}?url=${suffix}`,\n};\n\nconst buildLink = (url: URL | Location | HTMLAnchorElement | undefined) => {\n  const { repo, commit, branch, tag } = linkFormats;\n  const info = getRepo(url ?? location);\n  let link = repo;\n  if (info && !isRepoHome(url)) {\n    const { path } = info;\n    const builder = (fn: (_: any) => string, splitter: string | RegExp) => {\n      return fn(path.split(splitter)[1].split(/\\/|\\?/)[0]);\n    };\n    if (isBranch(url)) link = builder(branch, '/tree/');\n    else if (isCommit(url)) link = builder(commit, /\\/commit.*?\\//);\n    else if (isSingleTag(url)) link = builder(tag, '/tag/');\n  }\n  return link;\n};\n\nasync function getCurrentTab() {\n  const queryOptions = { active: true, lastFocusedWindow: true };\n  const [tab] = await chrome.tabs.query(queryOptions);\n  return tab;\n}\n\nfunction injectedAlert(message) {\n  // eslint-disable-next-line no-undef\n  alert(message);\n}\n\nfunction injectedWindowOpen(url) {\n  // eslint-disable-next-line no-undef\n  window.open(url);\n}\n\nasync function openInGk({ linkUrl, pageUrl }) {\n  let tab;\n  try {\n    tab = await getCurrentTab();\n  } catch (e) {\n    // eslint-disable-next-line no-console\n    console.error('Unexpected error');\n    // eslint-disable-next-line no-console\n    console.error(e);\n    return;\n  }\n\n  try {\n    const parsedLinkData = new URL(linkUrl ?? pageUrl);\n    const url = buildLink(parsedLinkData);\n    await chrome.scripting.executeScript(\n      {\n        target: { tabId: tab.id },\n        func: injectedWindowOpen,\n        args: [url],\n      },\n    );\n  } catch (e) {\n    // eslint-disable-next-line no-console\n    console.error(e);\n    await chrome.scripting.executeScript(\n      {\n        target: { tabId: tab.id },\n        func: injectedAlert,\n        args: [e.message ?? e],\n      },\n    );\n    if (e.name === 'OptionValidationError') {\n      chrome.runtime.openOptionsPage();\n    }\n  }\n}\n\nconst contextMenuId = 'open-in-gk-context-menu';\n\nchrome.contextMenus.create({\n  id: contextMenuId,\n  title: 'Open in VSCode',\n  contexts: ['link', 'page'],\n});\n\nchrome.contextMenus.onClicked.addListener(({ menuItemId, ...info }) => {\n  if (menuItemId !== contextMenuId) return;\n  const { linkUrl, pageUrl } = info;\n  openInGk({ linkUrl, pageUrl });\n});\n\nchrome.action.onClicked.addListener((({ url }) => {\n  openInGk({ linkUrl: url, pageUrl: url });\n}));\n"],"mappings":"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","names":["getRepo"]}