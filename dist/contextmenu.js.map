{"version":3,"sources":["../src/contextmenu.ts"],"sourcesContent":["import {\n  isRepoHome,\n  isRepoRoot,\n  isCommit,\n  isSingleTag,\n  utils,\n} from 'github-url-detection';\n\nimport { getFirstCommit } from '.';\n\nconst { getRepositoryInfo: getRepo } = utils;\n\nconst isBranch = (url) => {\n  return !isRepoHome(url) && isRepoRoot(url);\n}\n\nconst firstCommit = 'first_commit_here';\n\nconst linkFormats = {\n  repo: `gitkraken://repolink/${firstCommit}?url=true`,\n  commit: (commit) => `gitkraken://repolink/${firstCommit}/commit/${commit}?url=true`,\n  branch: (branch) => `gitkraken://repolink/${firstCommit}/branch/${branch}?url=true`,\n  tag: (tag) => `gitkraken://repolink/${firstCommit}/tag/${tag}?url=true`,\n};\n\nconst buildLink = (url: URL | Location | HTMLAnchorElement | undefined) => {\n  const { repo, commit, branch, tag } = linkFormats;\n  const info = getRepo(url ?? location);\n  let link = repo;\n  if (info && !isRepoHome(url)) {\n    const { path } = info;\n    const builder = (fn: (_: any) => string, splitter: string | RegExp) => {\n      return fn(path.split(splitter)[1].split(/\\/|\\?/)[0]);\n    };\n    if (isBranch(url)) link = builder(branch, '/tree/');\n    else if (isCommit(url)) link = builder(commit, /\\/commit.*?\\//);\n    else if (isSingleTag(url)) link = builder(tag, '/tag/');\n  }\n  return link;\n};\n\nconst PULL_REQUEST_PATH_REGEXP = /.+\\/([^/]+)\\/(pull)\\/[^/]+\\/(.*)/;\n\nclass OptionValidationError extends Error {\n    constructor(message) {\n        super(message);\n        this.name = 'OptionValidationError';\n    }\n}\n\nasync function getOptions() {\n    const options = await chrome.storage.sync.get({\n        remoteHost: '',\n        basePath: '',\n        debug: false,\n    });\n\n    if (options.basePath === '') {\n        throw new OptionValidationError('Looks like you haven\\'t configured this extension yet. You can find more information about this by visiting the extension\\'s README page.');\n    }\n\n    return options;\n}\n\nfunction getGkLink({\n    repo, file, isFolder, line,\n}, {\n    remoteHost, basePath, debug,\n}) {\n    let gkLink = 'gk';\n\n    if (remoteHost !== '') {\n        gkLink += `://gk-remote/ssh-remote+${remoteHost}`;\n    } else {\n        gkLink += '://file';\n    }\n\n    // windows paths don't start with slash\n    if (basePath[0] !== '/') {\n        gkLink += '/';\n    }\n\n    gkLink += `${basePath}/${repo}/${file}`;\n\n    // opening a folder and not a file\n    if (isFolder) {\n        gkLink += '/';\n    }\n\n    if (line) {\n        gkLink += `:${line}:1`;\n    }\n\n    if (debug) {\n        // eslint-disable-next-line no-console\n        console.log(`About to open link: ${gkLink}`);\n    }\n\n    return gkLink;\n}\n\nfunction isPR(linkUrl) {\n    return PULL_REQUEST_PATH_REGEXP.test(linkUrl);\n}\n\nfunction parseLink(linkUrl, selectionText, pageUrl) {\n    const url = new URL(linkUrl ?? pageUrl);\n    const path = url.pathname;\n\n    if (isPR(url.pathname)) {\n        const pathInfo = PULL_REQUEST_PATH_REGEXP.exec(path);\n        const repo = pathInfo[1];\n        const isFolder = false;\n        const file = selectionText;\n        let line = null;\n        if (pageUrl.includes(linkUrl)) {\n            line = pageUrl.replace(linkUrl, '').replace('R', '').replace('L', '');\n        }\n        return {\n            repo,\n            file,\n            isFolder,\n            line,\n        };\n    }\n\n    const pathRegexp = /.+\\/([^/]+)\\/(blob|tree)\\/[^/]+\\/(.*)/;\n\n    if (!pathRegexp.test(path)) {\n        throw new Error(`Invalid link. Could not extract info from: ${path}.`);\n    }\n\n    const pathInfo = pathRegexp.exec(path);\n\n    const repo = pathInfo[1];\n    const isFolder = pathInfo[2] === 'tree';\n    const file = pathInfo[3];\n\n    let line;\n\n    if (url.hash.indexOf('#L') === 0) {\n        line = url.hash.substring(2);\n    }\n\n    return {\n        repo,\n        file,\n        isFolder,\n        line,\n    };\n}\n\nasync function getCurrentTab() {\n    const queryOptions = { active: true, lastFocusedWindow: true };\n    const [tab] = await chrome.tabs.query(queryOptions);\n    return tab;\n}\n\nfunction injectedAlert(message) {\n    // eslint-disable-next-line no-undef\n    alert(message);\n}\n\nfunction injectedWindowOpen(url) {\n    // eslint-disable-next-line no-undef\n    window.open(url);\n}\n\nasync function openInGk({ linkUrl, selectionText, pageUrl }) {\n    let tab;\n    try {\n        tab = await getCurrentTab();\n    } catch (e) {\n        // eslint-disable-next-line no-console\n        console.error('Unexpected error');\n        // eslint-disable-next-line no-console\n        console.error(e);\n        return;\n    }\n\n    try {\n        const options = await getOptions();\n        const parsedLinkData = parseLink(linkUrl, selectionText, pageUrl);\n        const url = getGkLink(parsedLinkData, options);\n        await chrome.scripting.executeScript(\n            {\n                target: { tabId: tab.id },\n                func: injectedWindowOpen,\n                args: [url],\n            },\n        );\n    } catch (e) {\n        // eslint-disable-next-line no-console\n        console.error(e);\n        await chrome.scripting.executeScript(\n            {\n                target: { tabId: tab.id },\n                func: injectedAlert,\n                args: [e.message ?? e],\n            },\n        );\n        if (e.name === 'OptionValidationError') {\n            chrome.runtime.openOptionsPage();\n        }\n    }\n}\n\nconst contextMenuId = 'open-in-gk-context-menu';\n\nchrome.contextMenus.create({\n    id: contextMenuId,\n    title: 'Open in VSCode',\n    contexts: ['link', 'page'],\n});\n\nchrome.contextMenus.onClicked.addListener(({ menuItemId, ...info }) => {\n    if (menuItemId !== contextMenuId) {\n        return;\n    }\n\n    openInGk(info);\n});\n\nchrome.action.onClicked.addListener((({ url }) => {\n    openInGk({ linkUrl: url, pageUrl: url });\n}));"],"mappings":"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","names":["pathInfo","repo","isFolder","file","line"]}